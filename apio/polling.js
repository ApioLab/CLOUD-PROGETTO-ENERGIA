var configuration = require("./configuration/default.js");
var fs = require("fs-extra");
var htmlparser = require("htmlparser");
var Iconv = require("iconv").Iconv;
var MongoClient = require("mongodb").MongoClient;
var request = require("request");
MongoClient.connect("mongodb://" + configuration.database.hostname + ":" + configuration.database.port + "/" + configuration.database.database, function (error, db) {
    if (error) {
        console.log("Unable to get database");
    } else if (db) {
        request.get({url: "http://i-illumination.abbsolarinverters.com/progettoenergia1/login.php"}, function (e, r) {
            if (e) {
                console.log("Error while getting login page: ", e)
            } else if (r) {
                var cookie = r.headers["set-cookie"][0].split(";")[0];
                request.post({
                    headers: {Cookie: cookie},
                    url: "http://i-illumination.abbsolarinverters.com/progettoenergia1/login.php",
                    form: {
                        posted_username: "MARACCH",
                        posted_password: "peserv69",
                        submit: "Login",
                        PHPSESSID: cookie.split("=")[1]
                    }
                }, function (err, res, body) {
                    if (err) {
                        console.log("Error while login: ", err);
                    } else if (body) {
                        request.get({
                            //The web site id coded into ISO-8859-15 instead of UTF-8 so I have to set the enconding to
                            //null in order to have response in binary and not in string
                            encoding: null,
                            headers: {Cookie: cookie},
                            url: "http://i-illumination.abbsolarinverters.com/progettoenergia1/system.php"
                        }, function (e1, r1, b1) {
                            if (e1) {
                                console.log("Error while getting systems: ", e1);
                            } else if (b1) {
                                //I use the module iconv to convert from a ISO-8859-15 to a UTF-8 buffer.
                                //Then I convert it to string
                                var iconv = new Iconv("ISO-8859-15", "UTF-8"), buffer = iconv.convert(b1), b1 = String(buffer);

                                //Parsing the response, from string to nested JSON
                                var handler = new htmlparser.DefaultHandler(function (error) {
                                    if (error) {
                                        console.log("Error while instancing handler: ", error);
                                    }
                                });
                                var parser = new htmlparser.Parser(handler);
                                parser.parseComplete(b1);
                                var parsed = handler.dom;

                                var boardsAndApplications = {};

                                //These functions call each other recursively the result of all these calls is a JSON
                                //called boardsAndApplications contains the board name and the apps for all the boards
                                var domContent = function (dom) {
                                    dom.forEach(function (elem, index, ref) {
                                        if (elem.hasOwnProperty("attribs") && elem.attribs.hasOwnProperty("id") && elem.attribs.id.indexOf("cusect") === -1 && elem.attribs.id.indexOf("sect") > -1) {
                                            for (var x = index + 1, found = false; !found && x < ref.length; x++) {
                                                if (ref[x].hasOwnProperty("attribs") && ref[x].attribs.hasOwnProperty("id") && ref[x].attribs.id.indexOf("cusect") > -1) {
                                                    found = true;
                                                    associateBoard(elem.children, elem.attribs.id.split("sect")[1], ref[x].children);
                                                }
                                            }
                                        } else if (elem.hasOwnProperty("children")) {
                                            domContent(elem.children);
                                        }
                                    });
                                };

                                var associateBoard = function (dom, key, ref_to_app) {
                                    dom.forEach(function (elem) {
                                        if (elem.hasOwnProperty("attribs") && elem.attribs.hasOwnProperty("class") && elem.attribs.class.indexOf("Mini4") > -1 && elem.hasOwnProperty("children")) {
                                            elem.children.forEach(function (elCh) {
                                                if (elCh.hasOwnProperty("children")) {
                                                    boardsAndApplications[key] = {
                                                        boardName: elCh.children[0].children[0].data,
                                                        apps: {}
                                                    };

                                                    associateApp(ref_to_app, key);
                                                }
                                            });
                                        } else if (elem.hasOwnProperty("children")) {
                                            associateBoard(elem.children, key, ref_to_app);
                                        }
                                    });
                                };

                                var associateApp = function (dom, key) {
                                    dom.forEach(function (elem) {
                                        if (elem.hasOwnProperty("attribs") && elem.attribs.hasOwnProperty("valign") && elem.attribs.valign === "middle" && elem.hasOwnProperty("children")) {
                                            elem.children.forEach(function (elCh, index, arr) {
                                                if (elCh.hasOwnProperty("attribs") && elCh.attribs.hasOwnProperty("class") && elCh.attribs.class.indexOf("Mini3") > -1 && elCh.hasOwnProperty("children") && elCh.children[0].data === "[") {
                                                    boardsAndApplications[key].apps[elCh.children[1].children[0].children[0].data] = arr[index + 2].hasOwnProperty("children") ? arr[index + 2].children[0].data : "";
                                                }
                                            });
                                        } else if (elem.hasOwnProperty("children")) {
                                            associateApp(elem.children, key);
                                        }
                                    });
                                };

                                domContent(parsed);

                                var boardsAndApplicationsKeys = Object.keys(boardsAndApplications), numApps = 0, numMacroApps = 0;
                                boardsAndApplicationsKeys.forEach(function (key) {
                                    var appsKeys = Object.keys(boardsAndApplications[key].apps);
                                    appsKeys.forEach(function (app) {
                                        numMacroApps++;

                                        request.get({
                                            //The web site id coded into ISO-8859-15 instead of UTF-8 so I have to set the
                                            //enconding to null in order to have response in binary and not in string
                                            encoding: null,
                                            headers: {Cookie: cookie},
                                            url: "http://i-illumination.abbsolarinverters.com/progettoenergia1/system.php?cusn=" + app + "&section=CBS"
                                        }, function (eApp, rApp, bApp) {
                                            if (eApp) {
                                                console.log("Error while requesting the app: ", eApp);
                                                numMacroApps--;

                                                if (numMacroApps === 0) {
                                                    db.close();
                                                }
                                            } else if (bApp) {
                                                //I use the module iconv to convert from a ISO-8859-15 to a UTF-8 buffer.
                                                //Then I convert it to string
                                                var iconv = new Iconv("ISO-8859-15", "UTF-8"), buffer = iconv.convert(bApp), bApp = String(buffer);

                                                if (bApp.indexOf("Non ci sono punti luce") > -1) {
                                                    numMacroApps--;

                                                    if (numMacroApps === 0) {
                                                        db.close();
                                                    }
                                                } else {
                                                    //This array will contain the table headers
                                                    var headers = [];
                                                    //Parsing the response, from string to nested JSON
                                                    var handler = new htmlparser.DefaultHandler(function (error) {
                                                        if (error) {
                                                            console.log("Error while instancing handler: ", error);
                                                        }
                                                    });
                                                    var parser = new htmlparser.Parser(handler);
                                                    parser.parseComplete(bApp);
                                                    var parsed = handler.dom;

                                                    //This function will retrieve the value of the properties and will update
                                                    //the object or will create it if not exists
                                                    var getHeadersAndFillObj = function (dom) {
                                                        dom.forEach(function (elem) {
                                                            if (elem.type === "tag" && elem.name === "tr" && elem.hasOwnProperty("attribs") && elem.attribs.hasOwnProperty("class") && elem.attribs.class === "bk2") {
                                                                elem.children.forEach(function (elCh) {
                                                                    if (elCh.type === "tag" && elCh.name === "td" && elCh.hasOwnProperty("children")) {
                                                                        headers.push(elCh.children[0].data);
                                                                    }
                                                                });
                                                            } else if (elem.type === "tag" && elem.name === "tr" && elem.hasOwnProperty("attribs") && elem.attribs.hasOwnProperty("class") && (elem.attribs.class === "rowA" || elem.attribs.class === "rowB")) {
                                                                var temp_obj = {};
                                                                numApps++;
                                                                elem.children.forEach(function (elCh, index, ref_arr) {
                                                                    if (elCh.type === "tag" && elCh.name === "td") {
                                                                        if (elCh.hasOwnProperty("children")) {
                                                                            if (elCh.children[0].type === "tag" && elCh.children[0].name === "a" && elCh.children[0].children[0].data.indexOf("img src") === -1 && elCh.children[0].children[0].data.indexOf("a alt") === -1) {
                                                                                temp_obj[headers[(index - 5) / 2]] = elCh.children[0].children[0].data;
                                                                            } else if (elCh.children[0].data.indexOf("img src") === -1 && elCh.children[0].data.indexOf("a alt") === -1) {
                                                                                temp_obj[headers[(index - 5) / 2]] = elCh.children[0].data;
                                                                            }
                                                                        } else {
                                                                            temp_obj[headers[(index - 5) / 2]] = "";
                                                                        }
                                                                    }

                                                                    if (index === ref_arr.length - 1) {
                                                                        if (Object.keys(temp_obj).length) {
                                                                            var objectId = (String(app) + String(temp_obj.SN)).replace(/\0/g, "");
                                                                            db.collection("Objects").findOne({
                                                                                apioId: boardsAndApplications[key].boardName,
                                                                                objectId: objectId
                                                                            }, function (e_o, object) {
                                                                                if (e_o) {
                                                                                    console.log("Error while getting object with apioId " + boardsAndApplications[key].boardName + " and objectId " + objectId + ": ", e_o);
                                                                                    numApps--;
                                                                                    if (numApps === 0) {
                                                                                        numMacroApps--;
                                                                                    }

                                                                                    if (numMacroApps === 0) {
                                                                                        db.close();
                                                                                    }
                                                                                } else if (object) {
                                                                                    //APP EXISTS, UPDATE
                                                                                    var updt_obj = {};
                                                                                    for (var KEY in temp_obj) {
                                                                                        if (KEY !== "ID" && KEY !== "SN") {
                                                                                            updt_obj["properties." + KEY.toLocaleLowerCase().replace(/\./g, "").replace(/ /g, "_") + ".value"] = temp_obj[KEY];
                                                                                        }
                                                                                    }

                                                                                    db.collection("Objects").update({
                                                                                        apioId: boardsAndApplications[key].boardName,
                                                                                        objectId: objectId
                                                                                    }, {$set: updt_obj}, function (e_u) {
                                                                                        if (e_u) {
                                                                                            console.log("Error while updating object with apioId " + boardsAndApplications[key].boardName + " and objectId " + objectId + ": ", e_u);
                                                                                        } else {
                                                                                            console.log("Object with apioId " + boardsAndApplications[key].boardName + " and objectId " + objectId + " successfully updated");
                                                                                        }

                                                                                        numApps--;
                                                                                        if (numApps === 0) {
                                                                                            numMacroApps--;
                                                                                        }

                                                                                        if (numMacroApps === 0) {
                                                                                            db.close();
                                                                                        }
                                                                                    });
                                                                                } else {
                                                                                    //APP DOES NOT EXISTS, CREATE

                                                                                    ////Formatting name
                                                                                    //var groupName = "";
                                                                                    //var search = "progetto energia";
                                                                                    //var index = boardsAndApplications[key].apps[app].toLowerCase().indexOf(search);
                                                                                    //if (index > -1) {
                                                                                    //    var exclude = boardsAndApplications[key].apps[app].substr(index, search.length);
                                                                                    //    var stringComponents = boardsAndApplications[key].apps[app].split(exclude);
                                                                                    //    for (var sc in stringComponents) {
                                                                                    //        if (stringComponents[sc]) {
                                                                                    //            if (groupName === "") {
                                                                                    //                groupName = stringComponents[sc].trim();
                                                                                    //            } else {
                                                                                    //                groupName += " " + stringComponents[sc].trim();
                                                                                    //            }
                                                                                    //        }
                                                                                    //    }
                                                                                    //
                                                                                    //    //Check if character is not a letter or a digit
                                                                                    //    var regex = /[^A-Za-z0-9]/;
                                                                                    //    if (regex.test(groupName[0])) {
                                                                                    //        //Deleting first character if is not a letter or a digit
                                                                                    //        groupName = groupName.substring(1);
                                                                                    //    }
                                                                                    //} else {
                                                                                    //    groupName = boardsAndApplications[key].apps[app];
                                                                                    //}

                                                                                    //var add_obj = {
                                                                                    //    address: objectId,
                                                                                    //    apioId: boardsAndApplications[key].boardName,
                                                                                    //    db: {},
                                                                                    //    marker: {},
                                                                                    //    name: temp_obj.SN,
                                                                                    //    notifications: {},
                                                                                    //    objectId: objectId,
                                                                                    //    properties: {},
                                                                                    //    protocol: "p",
                                                                                    //    type: "object",
                                                                                    //    group: {
                                                                                    //        id: String(app),
                                                                                    //        name: groupName,
                                                                                    //        path: "/images/elettricalpanel.png"
                                                                                    //    }
                                                                                    //};
                                                                                    //
                                                                                    //for (var KEY in temp_obj) {
                                                                                    //    if (KEY !== "ID" && KEY !== "SN") {
                                                                                    //        add_obj.properties[KEY.toLocaleLowerCase().replace(/\./g, "").replace(/ /g, "_")] = {
                                                                                    //            label: KEY,
                                                                                    //            type: "asyncdisplay",
                                                                                    //            value: temp_obj[KEY]
                                                                                    //        };
                                                                                    //    }
                                                                                    //}

                                                                                    db.collection("systems").insert({
                                                                                        apioId: boardsAndApplications[key].boardName,
                                                                                        name: boardsAndApplications[key].boardName,
                                                                                        test: ""
                                                                                    }, function (err) {
                                                                                        if (err) {
                                                                                            console.log("Error while inserting the system with apioId " + boardsAndApplications[key].boardName + ": ", err);
                                                                                        } else {
                                                                                            console.log("System with apioId " + boardsAndApplications[key].boardName + " successfully inserted");

                                                                                            db.collection("Users").update({email: "mauro.acchione@progettoenergia.com"}, {
                                                                                                $push: {
                                                                                                    apioId: {
                                                                                                        code: boardsAndApplications[key].boardName,
                                                                                                        role: "superAdmin"
                                                                                                    }
                                                                                                }
                                                                                            }, function (err) {
                                                                                                if (err) {
                                                                                                    console.log("Error while enabling the board " + boardsAndApplications[key].boardName + " to the user mauro.acchione@progettoenergia.com: ", err);
                                                                                                } else {
                                                                                                    console.log("The board " + boardsAndApplications[key].boardName + " has been enabled to the user mauro.acchione@progettoenergia.com");
                                                                                                }
                                                                                            });
                                                                                        }

                                                                                        fs.readFile("public/applications/newfile/progettoEnergiaInstallation/application.mongo", "utf8", function (e_m, collection) {
                                                                                            if (e_m) {
                                                                                                console.log("Error while reading mongo file: ", e_m);
                                                                                            } else if (collection) {
                                                                                                //Formatting name
                                                                                                var groupName = "";
                                                                                                var search = "progetto energia";
                                                                                                var index = boardsAndApplications[key].apps[app].toLowerCase().indexOf(search);
                                                                                                if (index > -1) {
                                                                                                    var exclude = boardsAndApplications[key].apps[app].substr(index, search.length);
                                                                                                    var stringComponents = boardsAndApplications[key].apps[app].split(exclude);
                                                                                                    for (var sc in stringComponents) {
                                                                                                        if (stringComponents[sc]) {
                                                                                                            if (groupName === "") {
                                                                                                                groupName = stringComponents[sc].trim();
                                                                                                            } else {
                                                                                                                groupName += " " + stringComponents[sc].trim();
                                                                                                            }
                                                                                                        }
                                                                                                    }

                                                                                                    //Check if character is not a letter or a digit
                                                                                                    var regex = /[^A-Za-z0-9]/;
                                                                                                    if (regex.test(groupName[0])) {
                                                                                                        //Deleting first character if is not a letter or a digit
                                                                                                        groupName = groupName.substring(1);
                                                                                                    }
                                                                                                } else {
                                                                                                    groupName = boardsAndApplications[key].apps[app];
                                                                                                }

                                                                                                collection = JSON.parse(collection);
                                                                                                collection.address = objectId;
                                                                                                collection.apioId = boardsAndApplications[key].boardName;
                                                                                                collection.name = temp_obj.SN;
                                                                                                collection.objectId = objectId;
                                                                                                collection.group.id = String(app);
                                                                                                collection.group.name = groupName;

                                                                                                for (var KEY in temp_obj) {
                                                                                                    if (KEY !== "ID" && KEY !== "SN") {
                                                                                                        collection.properties[KEY.toLocaleLowerCase().replace(/\./g, "").replace(/ /g, "_")].value = temp_obj[KEY];
                                                                                                    }
                                                                                                }

                                                                                                db.collection("Objects").insert(collection, function (err) {
                                                                                                    if (err) {
                                                                                                        console.log("Error while inserting the new object: ", err);
                                                                                                    } else {
                                                                                                        console.log("The new object has been successfully inserted");

                                                                                                        fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/_" + objectId + "/_" + objectId + ".ino", "", function (err) {
                                                                                                            if (err) {
                                                                                                                console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/_" + objectId + "/_" + objectId + ".ino: ", err);
                                                                                                            }
                                                                                                        });

                                                                                                        fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/_" + objectId + "/Makefile", "", function (err) {
                                                                                                            if (err) {
                                                                                                                console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/_" + objectId + "/Makefile: ", err);
                                                                                                            }
                                                                                                        });

                                                                                                        fs.readFile("public/applications/newfile/progettoEnergiaInstallation/application.html", "utf8", function (e_h, htmlFile) {
                                                                                                            if (e_h) {
                                                                                                                console.log("Error while reading html file: ", e_h);
                                                                                                            } else if (htmlFile) {
                                                                                                                htmlFile = htmlFile.replace(/_TMP_/g, objectId);
                                                                                                                fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".html", htmlFile, function (err) {
                                                                                                                    if (err) {
                                                                                                                        console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".html: ", err);
                                                                                                                    }
                                                                                                                });
                                                                                                            }
                                                                                                        });

                                                                                                        fs.readFile("public/applications/newfile/progettoEnergiaInstallation/application.js", "utf8", function (e_j, jsFile) {
                                                                                                            if (e_j) {
                                                                                                                console.log("Error while reading js file: ", e_j);
                                                                                                            } else if (jsFile) {
                                                                                                                jsFile = jsFile.replace(/_TMP_/g, objectId);
                                                                                                                fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".js", jsFile, function (err) {
                                                                                                                    if (err) {
                                                                                                                        console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".js: ", err);
                                                                                                                    }
                                                                                                                });
                                                                                                            }
                                                                                                        });

                                                                                                        fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".mongo", JSON.stringify(collection, undefined, 4), function (err) {
                                                                                                            if (err) {
                                                                                                                console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".mongo: ", err);
                                                                                                            }
                                                                                                        });

                                                                                                        fs.readFile("public/applications/newfile/progettoEnergiaInstallation/icon.png", function (e_i, iconFile) {
                                                                                                            if (e_i) {
                                                                                                                console.log("Error while reading js file: ", e_i);
                                                                                                            } else if (iconFile) {
                                                                                                                fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/icon.png", iconFile, function (err) {
                                                                                                                    if (err) {
                                                                                                                        console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/icon.png: ", err);
                                                                                                                    }
                                                                                                                });
                                                                                                            }
                                                                                                        });

                                                                                                        numApps--;
                                                                                                        if (numApps === 0) {
                                                                                                            numMacroApps--;
                                                                                                        }

                                                                                                        if (numMacroApps === 0) {
                                                                                                            db.close();
                                                                                                        }
                                                                                                    }
                                                                                                });
                                                                                            }
                                                                                        });

                                                                                        //db.collection("Objects").insert(add_obj, function (err) {
                                                                                        //    if (err) {
                                                                                        //        console.log("Error while inserting the new object: ", err);
                                                                                        //    } else {
                                                                                        //        console.log("The new object has been successfully inserted");
                                                                                        //
                                                                                        //        var file_html = "<div id=\"ApioApplication" + objectId + "\" ng-app=\"ApioApplication" + objectId + "\" style=\"padding: 10px;\">\n    <div ng-controller=\"defaultController\">\n        <topappapplication></topappapplication>\n        <div id=\"app\" style=\"display: block;\">\n            <asyncdisplay propertyname=\"stato\" label=\"Stato\" writetoserial=\"false\"></asyncdisplay>\n            <asyncdisplay propertyname=\"indirizzo\" label=\"Indirizzo\" writetoserial=\"false\"></asyncdisplay>\n            <asyncdisplay propertyname=\"nominale\" label=\"Nominale\" writetoserial=\"false\"></asyncdisplay>\n            <asyncdisplay propertyname=\"potenza\" label=\"Potenza\" writetoserial=\"false\"></asyncdisplay>\n            <asyncdisplay propertyname=\"tensione\" label=\"Tensione\" writetoserial=\"false\"></asyncdisplay>\n            <asyncdisplay propertyname=\"corrente\" label=\"Corrente\" writetoserial=\"false\"></asyncdisplay>\n            <asyncdisplay propertyname=\"tensione_lamp\" label=\"Tensione Lamp.\" writetoserial=\"false\"></asyncdisplay>\n            <asyncdisplay propertyname=\"temp_hid\" label=\"Temp. HID\" writetoserial=\"false\"></asyncdisplay>\n            <asyncdisplay propertyname=\"data\" label=\"Data\" writetoserial=\"false\"></asyncdisplay>\n            <asyncdisplay propertyname=\"ora\" label=\"Ora\" writetoserial=\"false\"></asyncdisplay>\n        </div>\n    </div>\n</div>\n<script src=\"applications/" + objectId + "/" + objectId + ".js\"></script>";
                                                                                        //        var file_js = "var app = angular.module(\"ApioApplication" + objectId + "\", [\"apioProperty\"]);\napp.controller(\"defaultController\", [\"$scope\", \"currentObject\", function ($scope, currentObject) {\n    $scope.object = currentObject.get();\n    console.log(\"Sono il defaultController e l'oggetto è: \", $scope.object);\n}]);\n\nsetTimeout(function () {\n    angular.bootstrap(document.getElementById(\"ApioApplication" + objectId + "\"), [\"ApioApplication" + objectId + "\"]);\n}, 10);";
                                                                                        //        var file_mongo = JSON.stringify(add_obj, undefined, 4);
                                                                                        //        var file_icon = "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";
                                                                                        //
                                                                                        //        fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/_" + objectId + "/_" + objectId + ".ino", "", function (err) {
                                                                                        //            if (err) {
                                                                                        //                console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/_" + objectId + "/_" + objectId + ".ino: ", err);
                                                                                        //            }
                                                                                        //        });
                                                                                        //
                                                                                        //        fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/_" + objectId + "/Makefile", "", function (err) {
                                                                                        //            if (err) {
                                                                                        //                console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/_" + objectId + "/Makefile: ", err);
                                                                                        //            }
                                                                                        //        });
                                                                                        //
                                                                                        //        fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".html", file_html, function (err) {
                                                                                        //            if (err) {
                                                                                        //                console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".html: ", err);
                                                                                        //            }
                                                                                        //        });
                                                                                        //
                                                                                        //        fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".js", file_js, function (err) {
                                                                                        //            if (err) {
                                                                                        //                console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".js: ", err);
                                                                                        //            }
                                                                                        //        });
                                                                                        //
                                                                                        //        fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".mongo", file_mongo, function (err) {
                                                                                        //            if (err) {
                                                                                        //                console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/" + objectId + ".mongo: ", err);
                                                                                        //            }
                                                                                        //        });
                                                                                        //
                                                                                        //        fs.outputFile("public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/icon.png", file_icon, "base64", function (err) {
                                                                                        //            if (err) {
                                                                                        //                console.log("Error while creating file public/boards/" + boardsAndApplications[key].boardName + "/" + objectId + "/icon.png: ", err);
                                                                                        //            }
                                                                                        //        });
                                                                                        //    }
                                                                                        //
                                                                                        //    numApps--;
                                                                                        //    if (numApps === 0) {
                                                                                        //        numMacroApps--;
                                                                                        //    }
                                                                                        //
                                                                                        //    if (numMacroApps === 0) {
                                                                                        //        db.close();
                                                                                        //    }
                                                                                        //});
                                                                                    });
                                                                                }
                                                                            });
                                                                        } else {
                                                                            numApps--;
                                                                            if (numApps === 0) {
                                                                                numMacroApps--;
                                                                            }

                                                                            if (numMacroApps === 0) {
                                                                                db.close();
                                                                            }
                                                                        }
                                                                    }
                                                                });
                                                            } else if (elem.hasOwnProperty("children")) {
                                                                getHeadersAndFillObj(elem.children);
                                                            }
                                                        });
                                                    };

                                                    getHeadersAndFillObj(parsed);
                                                }
                                            } else {
                                                numMacroApps--;

                                                if (numMacroApps === 0) {
                                                    db.close();
                                                }
                                            }
                                        });
                                    });
                                });
                            }
                        });
                    }
                });
            }
        });
    }
});